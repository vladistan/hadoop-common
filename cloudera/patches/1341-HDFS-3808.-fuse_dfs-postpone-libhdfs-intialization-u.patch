From de14a95e895a72e7b2501bbe628c1e23578aae29 Mon Sep 17 00:00:00 2001
From: Aaron Twining Myers <atm@apache.org>
Date: Thu, 16 Aug 2012 23:47:33 +0000
Subject: [PATCH 1341/1344] HDFS-3808. fuse_dfs: postpone libhdfs intialization until after fork. Contributed by Colin Patrick McCabe.

Reason: bug
Ref: CDH-7409.
Author: Colin Patrick McCabe
(cherry picked from commit 8f6bbf1efa5e2bb83f4df88902216b3a3d6fc6bb)
---
 src/contrib/fuse-dfs/src/fuse_dfs.c  |   40 +++++++++--------------------
 src/contrib/fuse-dfs/src/fuse_init.c |   46 +++++++++++++++++++++++++---------
 2 files changed, 47 insertions(+), 39 deletions(-)

diff --git a/src/contrib/fuse-dfs/src/fuse_dfs.c b/src/contrib/fuse-dfs/src/fuse_dfs.c
index 0cf78e7..3d6bb53 100644
--- a/src/contrib/fuse-dfs/src/fuse_dfs.c
+++ b/src/contrib/fuse-dfs/src/fuse_dfs.c
@@ -22,8 +22,9 @@
 #include "fuse_init.h"
 #include "fuse_connect.h"
 
-#include <stdio.h>
+#include <string.h>
 #include <stdlib.h>
+#include <unistd.h>
 
 int is_protected(const char *path) {
 
@@ -65,15 +66,6 @@ static struct fuse_operations dfs_oper = {
   .truncate = dfs_truncate,
 };
 
-static void print_env_vars(void)
-{
-  const char *cp = getenv("CLASSPATH");
-  const char *ld = getenv("LD_LIBRARY_PATH");
-
-  fprintf(stderr, "LD_LIBRARY_PATH=%s",ld == NULL ? "NULL" : ld);
-  fprintf(stderr, "CLASSPATH=%s",cp == NULL ? "NULL" : cp);
-}
-
 int main(int argc, char *argv[])
 {
   int ret;
@@ -103,7 +95,7 @@ int main(int argc, char *argv[])
   }
 
   {
-    char buf[1024];
+    char buf[80];
 
     snprintf(buf, sizeof buf, "-oattr_timeout=%d",options.attribute_timeout);
     fuse_opt_add_arg(&args, buf);
@@ -114,24 +106,18 @@ int main(int argc, char *argv[])
 
   if (options.nn_uri == NULL) {
     print_usage(argv[0]);
-    exit(0);
-  }
-
-  ret = fuseConnectInit(options.nn_uri, options.nn_port);
-  if (ret) {
-    ERROR("FATAL: dfs_init: fuseConnectInit failed with error %d!", ret);
-    print_env_vars();
-    exit(EXIT_FAILURE);
-  }
-  if (options.initchecks == 1) {
-    ret = fuseConnectTest();
-    if (ret) {
-      ERROR("FATAL: dfs_init: fuseConnectTest failed with error %d!", ret);
-      print_env_vars();
-      exit(EXIT_FAILURE);
-    }
+    exit(EXIT_SUCCESS);
   }
 
+  /* Note: do not call any libhdfs functions until fuse_main has been invoked.
+   *
+   * fuse_main will daemonize this process, by calling fork().  This will cause
+   * any extant threads to be destroyed, which could cause problems if 
+   * libhdfs has started some Java threads.
+   *
+   * Most initialization code should go in dfs_init, which is invoked after the
+   * fork.  See HDFS-3808 for details.
+   */
   ret = fuse_main(args.argc, args.argv, &dfs_oper, NULL);
   fuse_opt_free_args(&args);
   return ret;
diff --git a/src/contrib/fuse-dfs/src/fuse_init.c b/src/contrib/fuse-dfs/src/fuse_init.c
index b18214c..92220aa 100644
--- a/src/contrib/fuse-dfs/src/fuse_init.c
+++ b/src/contrib/fuse-dfs/src/fuse_init.c
@@ -16,8 +16,6 @@
  * limitations under the License.
  */
 
-#include <strings.h>
-
 #include "fuse_dfs.h"
 #include "fuse_init.h"
 #include "fuse_options.h"
@@ -26,12 +24,22 @@
 
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
+
+static void print_env_vars(void)
+{
+  const char *cp = getenv("CLASSPATH");
+  const char *ld = getenv("LD_LIBRARY_PATH");
+
+  ERROR("LD_LIBRARY_PATH=%s",ld == NULL ? "NULL" : ld);
+  ERROR("CLASSPATH=%s",cp == NULL ? "NULL" : cp);
+}
 
 // Hacked up function to basically do:
 //  protectedpaths = split(options.protected,':');
 
-void init_protectedpaths(dfs_context *dfs) {
-
+static void init_protectedpaths(dfs_context *dfs)
+{
   char *tmp = options.protected;
 
   // handle degenerate case up front.
@@ -40,7 +48,6 @@ void init_protectedpaths(dfs_context *dfs) {
     dfs->protectedpaths[0] = NULL;
     return;
   }
-  assert(tmp);
 
   if (options.debug) {
     print_options();
@@ -81,10 +88,10 @@ void init_protectedpaths(dfs_context *dfs) {
 
 static void dfsPrintOptions(FILE *fp, const struct options *o)
 {
-  fprintf(fp, "[ protected=%s, nn_uri=%s, nn_port=%d, "
+  INFO("Mounting with options: [ protected=%s, nn_uri=%s, nn_port=%d, "
           "debug=%d, read_only=%d, initchecks=%d, "
           "no_permissions=%d, usetrash=%d, entry_timeout=%d, "
-          "attribute_timeout=%d, rdbuffer_size=%Zd, direct_io=%d ]",
+          "attribute_timeout=%d, rdbuffer_size=%zd, direct_io=%d ]",
           (o->protected ? o->protected : "(NULL)"), o->nn_uri, o->nn_port, 
           o->debug, o->read_only, o->initchecks,
           o->no_permissions, o->usetrash, o->entry_timeout,
@@ -93,12 +100,14 @@ static void dfsPrintOptions(FILE *fp, const struct options *o)
 
 void *dfs_init(void)
 {
+  int ret;
+
   //
   // Create a private struct of data we will pass to fuse here and which
   // will then be accessible on every call.
   //
-  dfs_context *dfs = (dfs_context*)malloc(sizeof(dfs_context));
-  if (NULL == dfs) {
+  dfs_context *dfs = calloc(1, sizeof(*dfs));
+  if (!dfs) {
     ERROR("FATAL: could not malloc dfs_context");
     exit(1);
   }
@@ -111,17 +120,30 @@ void *dfs_init(void)
   dfs->rdbuffer_size         = options.rdbuffer_size;
   dfs->direct_io             = options.direct_io;
 
-  fprintf(stderr, "Mounting with options ");
   dfsPrintOptions(stderr, &options);
-  fprintf(stderr, "\n");
 
   init_protectedpaths(dfs);
   assert(dfs->protectedpaths != NULL);
 
   if (dfs->rdbuffer_size <= 0) {
-    DEBUG("dfs->rdbuffersize <= 0 = %ld", dfs->rdbuffer_size);
+    DEBUG("dfs->rdbuffersize <= 0 = %zd", dfs->rdbuffer_size);
     dfs->rdbuffer_size = 32768;
   }
+
+  ret = fuseConnectInit(options.nn_uri, options.nn_port);
+  if (ret) {
+    ERROR("FATAL: dfs_init: fuseConnectInit failed with error %d!", ret);
+    print_env_vars();
+    exit(EXIT_FAILURE);
+  }
+  if (options.initchecks == 1) {
+    ret = fuseConnectTest();
+    if (ret) {
+      ERROR("FATAL: dfs_init: fuseConnectTest failed with error %d!", ret);
+      print_env_vars();
+      exit(EXIT_FAILURE);
+    }
+  }
   return (void*)dfs;
 }
 
-- 
1.7.0.4

